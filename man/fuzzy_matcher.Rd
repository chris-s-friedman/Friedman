% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fuzzy_matcher.R
\name{fuzzy_matcher}
\alias{fuzzy_matcher}
\title{Fuzzy string matching}
\usage{
fuzzy_matcher(comparand1, comparand2, distance.methods = c("lv",
  "cosine", "jaccard", "jw"))
}
\arguments{
\item{comparand1}{word or set of words to make a comparison with. Must be a 
character Vector}

\item{comparand2}{word or set of words to make a comparison with. Must be a 
character Vector}

\item{methods}{String matching method(s) to use. By default, Jaro, Jaccard, 
Levenshtein, and cosine methods are used. 
\code{"osa"} Optimal string aligment, (restricted Damerau-Levenshtein distance).
\code{"lv"} Levenshtein distance (as in Râ€™s native adist).
\code{"dl"} Full Damerau-Levenshtein distance.
\code{"hamming"} Hamming distance (a and b must have same nr of characters).
\code{"lcs"} Longest common substring distance.
\code{"qgram"} q-gram distance.
\code{"cosine"} cosine distance between q-gram profiles
\code{"jaccard"} Jaccard distance between q-gram profiles
\code{"jw"} Jaro, or Jaro-Winker distance.}

\item{...}{other parameters passed onto methods}
}
\value{
A matrix showing degree of matches for each method chosen, for each 
comparand
}
\description{
Produce a matrix showing the results of one or more fuzzy string matches
}
\examples{
fuzzy_matcher(c("PECS book", "PECS activity book", "PECS"), "PECS")

}
\references{
\url{http://bigdata-doctor.com/fuzzy-string-matching-survival-skill-tackle-unstructured-information-r/}
}
\author{
Chris Friedman, \email{chris.s.friedman@gmail.com}
}
